GTRG_tree2 <- read.tree("../TimeTrees/GTRG/GTRG_RAxML_result.CDS_timetree")
GTRG_tree3 <- read.tree("../TimeTrees/GTRG/GTRG_RAxML_result.lnc_RNA_timetree")
GTRG_tree4 <- read.tree("../TimeTrees/GTRG/GTRG_RAxML_result.other_timetree")
GTRG_tree5 <- read.tree("../TimeTrees/GTRG/GTRG_RAxML_result.UTR_timetree")
GTRG_tree6 <- read.tree("../TimeTrees/GTRG/GTRG_RAxML_result.unannotated_timetree")
GTRG_tree7 <- read.tree("../TimeTrees/GTRG/GTRG_RAxML_result.other_timetree")
GTRG_cat_tree <- c(GTRG_tree1,GTRG_tree2,GTRG_tree3,GTRG_tree4,GTRG_tree5,GTRG_tree6)
#multiphylo
class(GTRG_cat_tree) = "multiPhylo"
GTRG_result_wrf <- wRF.dist(GTRG_cat_tree, normalize = T)
GTRG_result_wrf
time_GTRG_tree1 <- read.tree("../TimeTrees/GTRG/GTRG_RAxML_result.ALL50K_timetree")
time_GTRG_tree2 <- read.tree("../TimeTrees/GTRG/GTRG_RAxML_result.CDS_timetree")
time_GTRG_tree3 <- read.tree("../TimeTrees/GTRG/GTRG_RAxML_result.lnc_RNA_timetree")
time_GTRG_tree4 <- read.tree("../TimeTrees/GTRG/GTRG_RAxML_result.other_timetree")
time_GTRG_tree5 <- read.tree("../TimeTrees/GTRG/GTRG_RAxML_result.UTR_timetree")
time_GTRG_tree6 <- read.tree("../TimeTrees/GTRG/GTRG_RAxML_result.unannotated_timetree")
time_GTRG_tree7 <- read.tree("../TimeTrees/GTRG/GTRG_RAxML_result.other_timetree")
time_GTRG_cat_tree <- c(GTRG_tree1,GTRG_tree2,GTRG_tree3,GTRG_tree4,GTRG_tree5,GTRG_tree6)
class(time_GTRG_cat_tree) = "multiPhylo"
time_GTRG_result_wrf <- wRF.dist(time_GTRG_cat_tree, normalize = T)
time_GTRG_result_wrf
GTRG_tree1 <- read.tree("../RAxML_br/GTRG/RAxML_result.ALL50K")
GTRG_tree2 <- read.tree("../RAxML_br/GTRG/RAxML_result.CDS")
GTRG_tree3 <- read.tree("../RAxML_br/GTRG/RAxML_result.lnc_RNA")
GTRG_tree4 <- read.tree("../RAxML_br/GTRG/RAxML_result.other")
GTRG_tree5 <- read.tree("../RAxML_br/GTRG/RAxML_result.UTR")
GTRG_tree6 <- read.tree("../RAxML_br/GTRG/RAxML_result.unannotated")
GTRG_tree7 <- read.tree("../RAxML_br/GTRG/RAxML_result.other")
GTRG_cat_tree <- c(GTRG_tree1,GTRG_tree2,GTRG_tree3,GTRG_tree4,GTRG_tree5,GTRG_tree6)
#multiphylo
class(GTRG_cat_tree) = "multiPhylo"
GTRG_result_wrf <- wRF.dist(GTRG_cat_tree, normalize = T)
GTRG_result_wrf
GTRG_result_wrf
time_GTRG_result_wrf
GTRG_result_wrf
time_GTRG_result_wrf
apply(as.matrix(GTRG_result_wrf), 1, mean)
#libs
library(ape)
library(phytools)
GTRG_cat_tree <- c(GTRG_tree1,GTRG_tree2,GTRG_tree3,GTRG_tree4,GTRG_tree5,GTRG_tree6)
#multiphylo
class(GTRG_cat_tree) = "multiPhylo"
ltt(GTRG_cat_tree, plot=TRUE, drop.extinct=FALSE, log.lineages=TRUE, gamma=TRUE, ...)
ltt(GTRG_cat_tree, plot=TRUE, drop.extinct=FALSE, log.lineages=TRUE, gamma=TRUE)
ltt(GTRG_cat_tree, plot=TRUE, drop.extinct=T, log.lineages=TRUE, gamma=TRUE)
ltt(GTRG_cat_tree, plot=TRUE, drop.extinct=FALSE, log.lineages=TRUE, gamma=F)
mltt.plot(GTRG_cat_tree)
ltt.plot(GTRG_cat_tree,
log = "y",
dcol = FALSE,
legend = FALSE,
backward = FALSE)
mltt.plot(GTRG_cat_tree,
log = "y",
dcol = FALSE,
legend = FALSE,
backward = FALSE)
mltt.plot(GTRG_cat_tree,
log = "y",
dcol = FALSE,
legend = FALSE,
backward = FALSE)
mltt.plot(GTRG_cat_tree,
log = "f",
dcol = FALSE,
legend = FALSE,
backward = FALSE)
CDS_GTR_TT <- read.tree("../TimeTrees/GTRG/GTRG_RAxML_result.ALL50K_timetree")
mltt.plot(CDS_GTR_TT,
log = "y",
dcol = FALSE,
legend = FALSE,
backward = FALSE)
is.ultrametric(CDS_GTR_TT)
library(phytools)
library(phangorn)
CDS_GTR_TT <- read.tree("../TimeTrees/GTRG/GTRG_RAxML_result.CDS_timetree")
plotTree(CDS_GTR_TT, ftype="off", lwd=1)
is.ultrametric(CDS_GTR_TT)
nnls <- nnls.tree(cophenetic(CDS_GTR_TT), x1, rooted = TRUE)
nnls <- nnls.tree(cophenetic(CDS_GTR_TT), CDS_GTR_TT, rooted = TRUE)
is.ultrametric(nnls)
plotTree(nnls,ftype="off",lwd=1)
is.ultrametric(nnls)
plot(nnls)
CDS_GTR_TT <- nnls
mltt.plot(CDS_GTR_TT,
log = "y",
dcol = FALSE,
legend = FALSE,
backward = FALSE)
mltt.plot(CDS_GTR_TT,
log = "y",
dcol = FALSE,
legend = FALSE,
backward = FALSE)
base_dir <- as.character("../TimeTrees/")
base_dir <- as.character("../TimeTrees/")
model_list <- as.character(list.files(base_dir))
base_dir <- as.character("../TimeTrees/")
model_list <- as.character(list.files(base_dir))
paste(base_dir,model,sep = "/")
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
print(tree)
}
}
paste(base_dir,model,sep = "/"))
paste(base_dir,model,sep = "/")
base_dir <- as.character("../TimeTrees")
model_list <- as.character(list.files(base_dir))
out_base_dir <- as.character("../TimeTrees")
paste(base_dir,model,sep = "/")
list.files(paste(base_dir,model,sep = "/"))
paste(base_dir,model,sep = "/")
tree<-c("test")
paste(base_dir,model,tree,sep = "/")
paste("Is tree ultrametric?",is.ultrametric(CDS_GTR_TT)
paste("Is tree ultrametric?",is.ultrametric(CDS_GTR_TT))
tree<-read.tree("../TimeTrees/GTRG/GTRG_RAxML_result.ALL50K_timetree")
paste("Is tree ultrametric?",is.ultrametric(tree))
is.rooted(tree)
paste(out_model_dir,tree_name,sep="/")
paste(base_dir,tree_name,sep="/")
paste(base_dir,tree,sep="/")
paste(base_dir,model_list_tree,sep="/")
paste(base_dir,model_list, tree,sep="/")
is.ultrametric(tree)
plotTree(CDS_GTR_TT, ftype="off", lwd=1)
plotTree(tree, ftype="off", lwd=1)
mltt.plot(tree,
log = "y",
dcol = FALSE,
legend = FALSE,
backward = FALSE)
tree<-root(read.tree("../TimeTrees/GTRG/GTRG_RAxML_result.ALL50K_timetree")),outgroup = neoaves_outgroup, resolve.root = T)
tree<-root(read.tree("../TimeTrees/GTRG/GTRG_RAxML_result.ALL50K_timetree"),outgroup = neoaves_outgroup, resolve.root = T)
neoaves_outgroup <- c('StrCam')
tree<-root(read.tree("../TimeTrees/GTRG/GTRG_RAxML_result.ALL50K_timetree"),outgroup = neoaves_outgroup, resolve.root = T)
mltt.plot(tree,
log = "y",
dcol = FALSE,
legend = FALSE,
backward = FALSE)
mltt.plot(tree,
log = "y",
dcol = FALSE,
legend = FALSE,
backward = FALSE)
(paste(base_dir,model_list,tree,sep="/")
paste(base_dir,model_list,tree,sep="/")
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
tree_file <- read.tree(paste(base_dir,model,tree,sep = "/"))
print(paste("Is tree ultrametric?",is.ultrametric(tree_file)))
nnls <- nnls.tree(cophenetic(tree_file), tree_file, rooted = TRUE)
tree < -nnls
#write.tree(tree_file, file = paste(base_dir,model_list,tree,sep="/"))
print(paste(base_dir,model_list,tree,sep="/"))
}
}
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
tree_file <- read.tree(paste(base_dir,model,tree,sep = "/"))
print(paste("Is tree ultrametric?",is.ultrametric(tree_file)))
nnls <- nnls.tree(cophenetic(tree_file), tree_file, rooted = TRUE)
tree < nnls
#write.tree(tree_file, file = paste(base_dir,model_list,tree,sep="/"))
print(paste(base_dir,model_list,tree,sep="/"))
}
}
list.files(paste(base_dir,model,sep = "/"))
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
tree_file <- read.tree(paste(base_dir,model,tree,sep = "/"))
print(paste("Is tree ultrametric?",model,tree,is.ultrametric(tree_file)))
nnls <- nnls.tree(cophenetic(tree_file), tree_file, rooted = TRUE)
tree < nnls
#write.tree(tree_file, file = paste(base_dir,model_list,tree,sep="/"))
print(paste(base_dir,model_list,tree,sep="/"))
}
}
rm(model)
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
tree_file <- read.tree(paste(base_dir,model,tree,sep = "/"))
print(paste("Is tree ultrametric?",model,tree,is.ultrametric(tree_file)))
nnls <- nnls.tree(cophenetic(tree_file), tree_file, rooted = TRUE)
tree < nnls
#write.tree(tree_file, file = paste(base_dir,model_list,tree,sep="/"))
print(paste(base_dir,model_list,tree,sep="/"))
}
}
model_list <- as.character(list.files(base_dir))
base_dir <- as.character("../TimeTrees")
model_list <- as.character(list.files(base_dir))
rm(model)
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
tree_file <- read.tree(paste(base_dir,model,tree,sep = "/"))
print(paste("Is tree ultrametric?",model,tree,is.ultrametric(tree_file)))
nnls <- nnls.tree(cophenetic(tree_file), tree_file, rooted = TRUE)
tree < nnls
#write.tree(tree_file, file = paste(base_dir,model_list,tree,sep="/"))
print(paste(base_dir,model_list,tree,sep="/"))
}
}
as.character(list.files(base_dir)
model_list <- as.character(list.files(base_dir))
list.files(paste(base_dir,model,sep = "/"))
model <- model_list[2]
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
tree_file <- read.tree(paste(base_dir,model,tree,sep = "/"))
print(paste("Is tree ultrametric?",model,tree,is.ultrametric(tree_file)))
nnls <- nnls.tree(cophenetic(tree_file), tree_file, rooted = TRUE)
tree < nnls
#write.tree(tree_file, file = paste(base_dir,model_list,tree,sep="/"))
print(paste(base_dir,model_list,tree,sep="/"))
}
}
rm(model)
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
tree_file <- read.tree(paste(base_dir,model,tree,sep = "/"))
print(paste("Is tree ultrametric?",model,tree,is.ultrametric(tree_file)))
nnls <- nnls.tree(cophenetic(tree_file), tree_file, rooted = TRUE)
tree < nnls
#write.tree(tree_file, file = paste(base_dir,model_list,tree,sep="/"))
print(paste(base_dir,model,tree,sep="/"))
}
}
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
tree_file <- read.tree(paste(base_dir,model,tree,sep = "/"))
print(paste("Is tree ultrametric?",model,tree,is.ultrametric(tree_file)))
nnls <- nnls.tree(cophenetic(tree_file), tree_file, rooted = TRUE)
tree <- nnls
#write.tree(tree_file, file =paste(base_dir,model,tree,sep="/"))
print(paste("Is tree ultrametric?",model,tree,is.ultrametric(tree_file)))
}
}
rm(tree)
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
tree_file <- read.tree(paste(base_dir,model,tree,sep = "/"))
print(paste("Is tree ultrametric?",model,tree,is.ultrametric(tree_file)))
nnls <- nnls.tree(cophenetic(tree_file), tree_file, rooted = TRUE)
tree_file <- nnls
#write.tree(tree_file, file =paste(base_dir,model,tree,sep="/"))
print(paste("Is tree ultrametric?",is.ultrametric(tree_file)))
}
}
paste(base_dir,model,tree,sep="/")
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
tree_file <- read.tree(paste(base_dir,model,tree,sep = "/"))
print(paste("Is tree ultrametric?",model,tree,is.ultrametric(tree_file)))
nnls <- nnls.tree(cophenetic(tree_file), tree_file, rooted = TRUE)
tree_file <- nnls
print(paste("Is tree ultrametric?",is.ultrametric(tree_file)))
write.tree(tree_file, file=paste(base_dir,model,tree,sep="/"))
}
}
CDS_GTR_TT <- read.tree("../TimeTrees/GTRG/GTRG_RAxML_result.CDS_timetree")
plotTree(CDS_GTR_TT, ftype="off", lwd=1)
is.ultrametric(CDS_GTR_TT)
nnls <- nnls.tree(cophenetic(CDS_GTR_TT), CDS_GTR_TT, rooted = TRUE)
mltt.plot(CDS_GTR_TT,
log = "y",
dcol = FALSE,
legend = FALSE,
backward = FALSE)
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
assign(paste(model,tree, sep="_"), read.tree(paste(base_dir,model,tree, sep="/")))
}
}
base_dir <- as.character("../TimeTrees")
model_list <- as.character(list.files(base_dir))
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
assign(paste(tree), read.tree(paste(base_dir,model,tree, sep="/")))
}
}
cat_GTRG_trees <- c(GTRG_RAxML_result.ALL50K_timetree, GTRG_RAxML_result.CDS_timetree,
GTRG_RAxML_result.intron_timetree, GTRG_RAxML_result.lnc_RNA_timetree,
GTRG_RAxML_result.lnc_RNA_timetree, GTRG_RAxML_result.other_timetree,
GTRG_RAxML_result.pseudogene_timetree, GTRG_RAxML_result.unannotated_timetree,
GTRG_RAxML_result.UTR_timetree)
class(GTRG_cat_tree) = "multiPhylo"
class(cat_GTRG_trees) = "multiPhylo"
mltt.plot(cat_GTRG_trees,
log = "y",
dcol = FALSE,
legend = FALSE,
backward = FALSE)
mltt.plot(cat_GTRG_trees,
log = "y",
dcol = FALSE,
legend = TRUE,
backward = FALSE)
ltt.coplot(cat_GTRG_trees,
log = "y",
dcol = FALSE,
legend = TRUE,
backward = FALSE)
library(ggtree)
library(ggplot2)
mltt.plot(cat_GTRG_trees,
log = "y",
dcol = FALSE,
legend = FALS,
backward = FALSE) + aes(color=cat_GTRG_trees)
mltt.plot(cat_GTRG_trees,
log = "y",
dcol = FALSE,
legend = FALSE,
backward = FALSE) + aes(color=cat_GTRG_trees)
mltt.plot(cat_GTRG_trees,
log = "y",
dcol = FALSE,
legend = FALSE,
backward = FALSE) + aes(color=cat_GTRG_trees) + legend()
mltt.plot(cat_GTRG_trees,
log = "y",
dcol = FALSE,
legend = FALSE,
backward = FALSE) + legend()
mltt.plot(cat_GTRG_trees,
log = "y",
dcol = FALSE,
legend = FALSE,
backward = FALSE) + legend(col = par("col"))
mltt.plot(cat_GTRG_trees, log="y", legend=FALSE)
mltt.plot(cat_GTRG_trees, log="y", legend=T)
GTRG_trees <- c(GTRG_RAxML_result.ALL50K_timetree, GTRG_RAxML_result.CDS_timetree,
GTRG_RAxML_result.intron_timetree, GTRG_RAxML_result.lnc_RNA_timetree,
GTRG_RAxML_result.lnc_RNA_timetree, GTRG_RAxML_result.other_timetree,
GTRG_RAxML_result.pseudogene_timetree, GTRG_RAxML_result.unannotated_timetree,
GTRG_RAxML_result.UTR_timetree)
class(GTRG_trees) = "multiPhylo"
mltt.plot(GTRG_trees,
log = "y",
dcol = FALSE,
legend = FALSE,
backward = FALSE)
mltt.plot(GTRG_trees,
log = "y",
dcol = FALSE,
legend = FALSE,
backward = FALSE)
mltt.plot(cat_GTRG_trees, log="y", legend=T)
mltt.plot(cat_GTRG_trees, log="y", legend=F)
mltt.plot(GTRG_trees,
log = "y",
dcol = FALSE,
legend = FALSE,
backward = FALSE)
yule.trees <- TreeSim::sim.bd.taxa(n=32, numbsim=100, lambda=0.1, mu=0, complete=FALSE)
install.packages("TreeSim")
library(TreeSim)
yule.trees <- TreeSim::sim.bd.taxa(n=32, numbsim=100, lambda=0.1, mu=0, complete=FALSE)
bd.trees <- TreeSim::sim.bd.taxa(n=300, numbsim=10, lambda=1, mu=.9, complete=FALSE)
yule.trees <- TreeSim::sim.bd.taxa(n=32, numbsim=100, lambda=0.1, mu=0, complete=FALSE)
depth.range <- range(unlist(lapply(yule.trees,ape::branching.times)), unlist(lapply(GTRG_trees,ape::branching.times)))
max.depth <- sum(abs(depth.range)) #ape rescales depths
plot(x=c(0, -1*max.depth), y=c(1, ape::Ntip(yule.trees[[1]])), log="y", type="n", bty="n", xlab="Time", ylab="N")
colors=c(rgb(1,0,0,0.5), rgb(0, 0, 0, 0.5))
list.of.both <- list(GTRG_trees, yule.trees)
for (i in sequence(2)) {
tree.list <- list.of.both[[i]]
for (j in sequence(length(tree.list))) {
ape::ltt.lines(tree.list[[j]], col=colors[[i]])
}
}
yule.trees <- TreeSim::sim.bd.taxa(n=32, numbsim=100, lambda=0.1, mu=0, complete=T)
depth.range <- range(unlist(lapply(yule.trees,ape::branching.times)), unlist(lapply(GTRG_trees,ape::branching.times)))
max.depth <- sum(abs(depth.range)) #ape rescales depths
plot(x=c(0, -1*max.depth), y=c(1, ape::Ntip(yule.trees[[1]])), log="y", type="n", bty="n", xlab="Time", ylab="N")
colors=c(rgb(1,0,0,0.5), rgb(0, 0, 0, 0.5))
list.of.both <- list(GTRG_trees, yule.trees)
for (i in sequence(2)) {
tree.list <- list.of.both[[i]]
for (j in sequence(length(tree.list))) {
ape::ltt.lines(tree.list[[j]], col=colors[[i]])
}
}
legend("topleft", legend=c("Birth Death", "Yule"), fill=colors)
mltt.plot(GTRG_trees,
log = "y",
dcol = FALSE,
legend = FALSE,
backward = FALSE)
mltt.plot(GTRG_trees,
log = "y",
dcol = FALSE,
legend = FALSE,
backward = T)
gammaStat(GTRG_trees)
gammaStat(GTRG_trees[[1]])
gammaStat(GTRG_trees[[2]])
gammaStat(GTRG_trees[[3]])
getwd()
gammaStat(paste(base_dir,model,tree)
gammaStat(paste(base_dir,model,tree))
print("gamma statistics for", tree, gammaStat(paste(base_dir,model,tree)))
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
assign(paste(tree), read.tree(paste(base_dir,model,tree, sep="/")))
print("gamma statistics for", tree, gammaStat(paste(base_dir,model,tree)))
}
}
paste(base_dir,model,tree))
paste(base_dir,model,tree)
paste(base_dir,model,tree,sep = "/"))
paste(base_dir,model,tree,sep = "/")
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
assign(paste(tree), read.tree(paste(base_dir,model,tree, sep="/")))
print("gamma statistics for", tree, gammaStat(paste(base_dir,model,tree,sep = "/")))
}
}
paste(base_dir,model,sep = "/")
gammaStat(GTRG_RAxML_result.ALL50K_timetree)
paste(base_dir,model,tree, sep="/"))
paste(base_dir,model,tree, sep="/")
gammaStat(paste(base_dir,model,tree,sep = "/"))
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
assign(paste(tree), read.tree(paste(base_dir,model,tree, sep="/")))
print("gamma statistics for", tree, gammaStat(paste(base_dir,model,tree,sep = "/")))
}
}
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
assign(paste(tree_file), read.tree(paste(base_dir,model,tree, sep="/")))
print("gamma statistics for", tree, gammaStat(paste(base_dir,model,tree,sep = "/")))
}
}
paste(base_dir,model,sep = "/"))
paste(base_dir,model,sep = "/")
paste(base_dir,model,sep = "/")
paste(base_dir,model,tree,sep = "/")
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
assign(paste(tree), read.tree(paste(base_dir,model,tree, sep="/")))
print("gamma statistics for", tree, gammaStat(tree))
}
}
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
assign(paste(tree), read.tree(paste(base_dir,model,tree, sep="/")))
paste("gamma statistics for", tree, gammaStat(tree))
}
}
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
assign(paste(tree), read.tree(paste(base_dir,model,tree, sep="/")))
print(paste("gamma statistics for", tree, gammaStat(tree)))
}
}
paste(base_dir,model,tree, sep="/")
class(tree)
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
tree_file <- assign(paste(tree), read.tree(paste(base_dir,model,tree, sep="/")))
print(paste("gamma statistics for", tree, gammaStat(tree_file)))
}
}
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
tree_file <- assign(paste(tree), read.tree(paste(base_dir,model,tree, sep="/")))
print(paste("gamma statistics for", tree, round(gammaStat(tree_file))),digits = 4)
}
}
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
tree_file <- assign(paste(tree), read.tree(paste(base_dir,model,tree, sep="/")))
print(paste("gamma statistics for", tree, round(gammaStat(tree_file))),digits = 3)
}
}
round(gammaStat(tree_file))),digits = 3)
for(model in model_list) {
for(tree in list.files(paste(base_dir,model,sep = "/"))) {
tree_file <- assign(paste(tree), read.tree(paste(base_dir,model,tree, sep="/")))
print(paste("gamma statistics for", tree, round(gammaStat(tree_file),digits = 3)))
}
}
#libs
library(ape)
library(phytools)
library(phangorn)
library(ggtree)
library(ggplot2)
install.packages("TreeSim")
library(TreeSim)
time_GTRG_tree <- read.tree("../TimeTrees/GTRG/GTRG_RAxML_result.ALL50K_timetree")
time_HKY_tree2 <- read.tree("../TimeTrees/HKY85/HKY85_RAxML_result.ALL50K_timetree")
time_JC69_tree <- read.tree("../TimeTrees/JC69/JC69_RAxML_result.ALL50K_timetree")
time_K80_tree <- read.tree("../TimeTrees/K80/K80_RAxML_result.ALL50K_timetree")
models_cat <- c(time_GTRG_tree, time_HKY_tree2, time_JC69_tree,time_K80_tree)
class(time_GTRG_tree, time_HKY_tree2, time_JC69_tree, time_K80_tree) = "multiPhylo"
class(time_GTRG_tree, time_HKY_tree2, time_JC69_tree, time_K80_tree) = "multiPhylo"
class(time_GTRG_tree, time_HKY_tree2, time_JC69_tree, time_K80_tree)
class(models_cat)
class(models_cat)  = "multiPhylo"
time_models_result_wrf <- wRF.dist(models_cat, normalize = T)
time_models_result_wrf
