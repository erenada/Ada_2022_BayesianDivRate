## Diversification rate estimation under log-normal and Beta2,18 priors

## Modified from https://revbayes.github.io/


#######################
# Reading in the Data #
#######################

###### This just defines a single model for all sites #######

### Read in sequence data for both genes

T <- readTrees("../RefTrees/GTRG/ALL50KTree")[1]

# Get some useful variables from the data. We need these later on.
taxa <- T.taxa()

# set my move index
mvi = 0
mni = 0


######################
# birth-death model  #
######################

### the birth rate is a stochastic random variable drawn from a lognormal prior
### MCMC samples this variable using a scale proposal
diversification_mean <- ln(ln(41.0/2.0) / T.rootAge() )
diversification_sd <- 0.587405
diversification ~ dnLognormal(mean=diversification_mean,sd=diversification_sd)
moves[++mvi] = mvScale(diversification,lambda=1.0,tune=true,weight=3.0)

turnover_mean <- ln( ln(41.0/2.0) / T.rootAge() )
turnover_sd <- 0.587405*2
turnover ~ dnBeta(18.0,2.0)
moves[++mvi] = mvScale(turnover,lambda=1.0,tune=true,weight=3.0)

### Transform the parameters
birth_rate := diversification + turnover
death_rate := turnover

### rho is the probability of sampling species at the present
### fix this to 32/41, since there are ~367 described species of primates
### and we have sampled 32
rho <- T.ntips()/41

### the BDP is conditioned on the root time, we can get this value from our tree and set a constant node
root_time <- T.rootAge()

### the time tree is a stochastic node modeled by the constant rate birth-death process (dnBDP)
timetree ~ dnBDP(lambda=birth_rate, mu=death_rate, rho=rho, rootAge=root_time, samplingStrategy="uniform", condition="survival", taxa=taxa)

### clamp the model with the "observed" tree
timetree.clamp(T)



#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(birth_rate)

### set up the monitors that will output parameter values to file and screen
monitors[1] = mnModel(filename="../output/ALL50K/ALL50K_BD_T_B18_2.log",printgen=10, separator = TAB)
monitors[2] = mnScreen(printgen=1000, birth_rate, death_rate)


################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves)

### pre-burnin to tune the proposals ###
mymcmc.burnin(generations=10000,tuningInterval=200)

### run the MCMC ###
mymcmc.run(generations=1000000)

## ML Analysis

pow_p = powerPosterior(mymodel, moves, monitors, "../output/ALL50K/ALL50K_BD_Beta2-18_powp.out", cats=127, sampleFreq=10)

pow_p.burnin(generations=10000,tuningInterval=200)

pow_p.run(generations=10000)

ss = steppingStoneSampler(file="../output/ALL50K/ALL50K_BD_Beta2-18_powp.out", powerColumnName="power", likelihoodColumnName="likelihood")

write("Stepping stone marginal likelihood:\t", ss.marginal() )

ps = pathSampler(file="../output/ALL50K/ALL50K_BD_Beta2-18_powp.out", powerColumnName="power", likelihoodColumnName="likelihood")

write("Path-sampling marginal likelihood:\t", ps.marginal() )

## quit ##
q()
