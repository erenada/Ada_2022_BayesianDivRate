################################################################################
#
# RevBayes Example: Bayesian inference of diversification rates under a
#                   constant-rate pure-birth model
#
#
# authors: Sebastian Hoehna and Tracy A. Heath
#
################################################################################

#######################
# Reading in the Data #
#######################

###### This just defines a single model for all sites #######

### Read in sequence data for both genes

T <- readTrees("/Users/eren/Documents/GitHub/Chapter2/TimeTrees/GTRG/GTRG_RAxML_result.lnc_RNA_timetree")[1]

# Get some useful variables from the data. We need these later on.
taxa <- T.taxa()

# set my move index
mvi = 0
mni = 0

######################
# pure-birth  model  #
######################

### the birth rate is a stochastic random variable drawn from a lognormal prior
### MCMC samples this variable using a scale proposal
birth_rate_mean <- ln( ln(41.0/2.0) / T.rootAge() )
birth_rate_sd <- 0.587405 * 2
birth_rate ~ dnLognormal(mean=birth_rate_mean,sd=birth_rate_sd)
moves[++mvi] = mvScale(birth_rate,lambda=1.0,tune=true,weight=3.0)

### rho is the probability of sampling
### fixed to 32/41, since there are ~41 described order of birds
### and we have sampled 32
rho <- T.ntips()/41

### the BDP is conditioned on the root time, we can get this value from our tree and set a constant node
root_time <- T.rootAge()

### the time tree is a stochastic node modeled by the constant rate birth-death process (dnBDP)
### by setting mu to the constant value 0.0, we are specifying a pure-birth process
timetree ~ dnBDP(lambda=birth_rate, mu=0.0, rho=rho, rootAge=root_time, samplingStrategy="uniform", condition="survival", taxa=taxa)

### clamp the model with the "observed" tree
timetree.clamp(T)



#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(birth_rate)

### set up the monitors that will output parameter values to file and screen
monitors[++mni] = mnModel(filename="/Users/eren/Documents/GitHub/Chapter2/revbayes/output/lnc_RNA/lnc_RNATree_Yule_logNormal.log",printgen=10, separator = TAB)
monitors[++mni] = mnScreen(printgen=1000, birth_rate)



################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="mixed")

### pre-burnin to tune the proposals ###

#### run the MCMC ###
mymcmc.run(generations=1000000)
#mymcmc.run(generations=1000000, underPrior=TRUE)

## ML Analysis

pow_p = powerPosterior(mymodel, moves, monitors, "/Users/eren/Documents/GitHub/Chapter2/revbayes/output/lnc_RNA/lnc_RNA_Yule_lognormal_powp.out", cats=127, sampleFreq=10)


pow_p.burnin(generations=10000,tuningInterval=200)

pow_p.run(generations=10000)

ss = steppingStoneSampler(file="/Users/eren/Documents/GitHub/Chapter2/revbayes/output/lnc_RNA/lnc_RNA_Yule_lognormal_powp.out", powerColumnName="power", likelihoodColumnName="likelihood")

write("Stepping stone marginal likelihood:\t", ss.marginal() )

ps = pathSampler(file="/Users/eren/Documents/GitHub/Chapter2/revbayes/output/lnc_RNA/lnc_RNA_Yule_lognormal_powp.out", powerColumnName="power", likelihoodColumnName="likelihood")

write("Path-sampling marginal likelihood:\t", ps.marginal() )

## quit ##
q()
